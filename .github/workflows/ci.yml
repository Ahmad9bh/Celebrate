name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Show repo root contents (debug)
        run: |
          pwd
          ls -la
          echo "--- backend/ ---"
          ls -la backend
          echo "--- backend/prisma/ ---"
          ls -la backend/prisma || true

      - name: Install backend dependencies (workspace)
        run: npm ci --workspace backend --include-workspace-root

      - name: Check DATABASE_URL provided
        run: |
          if [ -z "${{ secrets.PG_TEST_DATABASE_URL }}" ]; then
            echo "PG_TEST_DATABASE_URL is not set in repo secrets."
            exit 1
          fi
          if [ -z "${{ secrets.PG_TEST_DIRECT_DATABASE_URL }}" ]; then
            echo "PG_TEST_DIRECT_DATABASE_URL is not set in repo secrets."
            exit 1
          fi

      - name: Run Prisma migrations (deploy)
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.PG_TEST_DIRECT_DATABASE_URL }}
          DIRECT_DATABASE_URL: ${{ secrets.PG_TEST_DIRECT_DATABASE_URL }}
        run: |
          echo "Database URL diagnostics (migrations):"
          node -e "try{const u=new URL(process.env.DATABASE_URL);console.log('DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DATABASE_URL invalid')}"
          node -e "try{const u=new URL(process.env.DIRECT_DATABASE_URL);console.log('DIRECT_DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DIRECT_DATABASE_URL invalid')}"
          pwd
          test -f prisma/schema.prisma && echo "Found prisma/schema.prisma" || (echo "schema.prisma not found" && ls -la && ls -la prisma && exit 1)
          # Reset and apply schema directly (simpler path for CI)
          npx -y prisma@5.22.0 db push --force-reset --skip-generate --schema prisma/schema.prisma

  backend-tests:
    needs: [migrations]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (workspaces)
        run: npm ci

      - name: Prisma sanity (ensure schema + list tables)
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.PG_TEST_DIRECT_DATABASE_URL }}
          DIRECT_DATABASE_URL: ${{ secrets.PG_TEST_DIRECT_DATABASE_URL }}
        run: |
          echo "Database URL diagnostics (sanity):"
          node -e "try{const u=new URL(process.env.DATABASE_URL);console.log('DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DATABASE_URL invalid')}"
          node -e "try{const u=new URL(process.env.DIRECT_DATABASE_URL);console.log('DIRECT_DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DIRECT_DATABASE_URL invalid')}"
          echo "Checking Prisma status and ensuring schema is applied"
          npx -y prisma@5.22.0 migrate status --schema prisma/schema.prisma || true
          npx -y prisma@5.22.0 db push --skip-generate --schema prisma/schema.prisma
          npm i -D pg@8
          node -e "(async()=>{const {Client}=require('pg');const u=process.env.DATABASE_URL;const c=new Client({connectionString:u});await c.connect();const r=await c.query(\"select table_schema,table_name from information_schema.tables where table_schema='public' order by 1,2\");console.log('Tables:',r.rows);await c.end();})().catch(e=>{console.error(e);process.exit(1);});"

      - name: Run tests
        env:
          DATABASE_URL: ${{ secrets.PG_TEST_DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.PG_TEST_SHADOW_DATABASE_URL }}
          DIRECT_DATABASE_URL: ${{ secrets.PG_TEST_DIRECT_DATABASE_URL }}
        run: |
          echo "Database URL diagnostics (backend tests):"
          node -e "try{const u=new URL(process.env.DATABASE_URL);console.log('DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DATABASE_URL invalid')}"
          node -e "try{const u=new URL(process.env.DIRECT_DATABASE_URL);console.log('DIRECT_DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DIRECT_DATABASE_URL invalid')}"
          npm test

  e2e-frontend:
    needs: [migrations]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (workspaces)
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests (starts servers automatically)
        env:
          DATABASE_URL: ${{ secrets.PG_TEST_DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.PG_TEST_SHADOW_DATABASE_URL }}
          DIRECT_DATABASE_URL: ${{ secrets.PG_TEST_DIRECT_DATABASE_URL }}
          JWT_SECRET: dev-secret
          USE_MOCK_STRIPE: "1"
          NEXT_PUBLIC_API_BASE: http://localhost:4000
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_dummy
        run: |
          echo "Database URL diagnostics (e2e):"
          node -e "try{const u=new URL(process.env.DATABASE_URL);console.log('DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DATABASE_URL invalid')}"
          node -e "try{const u=new URL(process.env.DIRECT_DATABASE_URL);console.log('DIRECT_DATABASE_URL host:',u.hostname,'params:',u.searchParams.toString());}catch(e){console.log('DIRECT_DATABASE_URL invalid')}"
          npm run test:e2e

      - name: Upload Playwright HTML report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
          if-no-files-found: ignore
          retention-days: 7
